<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd" >

	<description>Spring公共配置</description>
	<!-- 使用配置文件加载数据库配置 -->
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath*:/application.properties" />


	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.zdsoft.bpm.service.client,com.zdsoft.finance,com.zdsoft.essential.client.service,com.zdsoft.framework.core.server,com.zdsoft.framework.cra.client.service,
	                                      com.zdsoft.framework.cra.rpcservice,
					  					  com.zdsoft.framework.core.server,
					                      com.zdsoft.framework.cra.timer">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Component" />
	</context:component-scan>
	
	<task:annotation-driven executor="myExecutor" scheduler="myScheduler" />
	<task:executor id="myExecutor" pool-size="5" />
	<task:scheduler id="myScheduler" pool-size="10" />

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory"
		class="com.zdsoft.finance.common.utils.FinanceLocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 设置hibernate方言 可以使用java类动态生成 -->
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="com.zdsoft.finance.**.entity" />
		<property name="jpaProperties">
			<props>
				<!-- 命名规则 My_NAME->MyName -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 配置hibernate的属性 如果使用log4jdbc这个就不起作用 -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<!--二级缓存 -->
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
			</props>
		</property>
	</bean>

	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform" value="${hibernate.dialect}" />
	</bean>

	<!-- 数据源配置, 使用Tomcat JDBC连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<property name="filters" value="stat" />
		<property name="initialSize" value="${jdbc.pool.initialSize}" />
		<property name="minIdle" value="10" />
		<property name="maxIdle" value="${jdbc.pool.maxIdle}"/>
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<property name="maxWait" value="60000" />

		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="poolPreparedStatements" value="true" />
		<property name="maxOpenPreparedStatements" value="40" />
	</bean>

	<!-- JSR303 Validator定义 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />



    <!-- Spring Data Jpa配置 -->
	<jpa:repositories base-package="com.zdsoft.finance.**.repository"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory"
        factory-class="com.zdsoft.finance.common.base.CustomRepositoryFactoryBean" /><!--用自定义RepositoryFactoryBean替换默认的RepositoryFactoryBean-->

    <!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
    <!--事务管理器-->
    <tx:annotation-driven  transaction-manager="transactionManager" />

	<!-- 引入工作流 -->
	<import resource="classpath:spring/spring-bpmclient-mvc.xml"/>
	<!-- 引入cms -->
	<import resource="classpath:spring/spring-cms-client.xml"/>
	
	<!-- 导入公共Spring配置文件 -->
	<import resource="classpath:META-INF/spring/spring-common-context.xml" />
	<!-- 自动注册应用系统信息 -->
	<bean name="regist-app"
		  class="com.zdsoft.framework.cra.client.service.RegAppConfigure">
		<property name="config" value="application.properties" />
		<property name="isBusinessApp" value="false" />
	</bean>
	<!-- 自动扫描并注册资源 -->
	<bean class="com.zdsoft.framework.cra.client.service.RegMenuGroupService"
		  depends-on="regist-app">
		<property name="menuGroup" value="menu.properties" />
	</bean>
	<!-- 引入文件上传的bean -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
	  
</beans>